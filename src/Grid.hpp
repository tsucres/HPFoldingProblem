//
//  Grid.hpp
//  HPFolding
//
//  Created by Stéphane Sercu on 1/11/16.
//  Copyright © 2016 Stéphane Sercu. All rights reserved.
//

#ifndef Grid_hpp
#define Grid_hpp

#include <stdio.h>
#include <vector>
#include <cmath>
#include <iostream>
#include <string>
#include <algorithm>
#include <ostream>

using namespace std;

# define FREE_CELL ' ' // TODO: change to const char
# define OUT_CELL '-'

struct Rect {
    int xmin;
    int ymin;
    int xmax;
    int ymax;
    bool contains(int x, int y) {
        return (((x>=xmin)&&(x<=xmax)) && (xmax-xmin != 0))
        && (((y>=ymin)&&(y<=ymax)) && (ymax-ymin != 0));
    }
};
struct Point {
    int x;
    int y;
    
    Point(int x, int y):x(x),y(y) {}
    friend bool operator==(const Point& lhs, const Point& rhs)
    {
        return (lhs.x==rhs.x && rhs.y == rhs.y);
    }
};

class BasicGrid {
protected:
    int size; // # of rows/cols
    vector<int> cells;
    
    string protein;
    int score; // current score
    
public:
    BasicGrid(int size, string prot);
    bool setCell(int x, int y, int amino_ind);
    int getSize()  const;
    int getCell(int x, int y)  const;
    int getScore()  const;
    int getCenter()  const;
    char getAmino(int x, int y)  const;
    void draw_conformation(ostream& out=cout)  const;
};

class Grid : public BasicGrid {
private:
    
    vector<int> exp_sites; // Exposed sites (associated with ther weights)
    
    int so[4]; // # of exposed sites of weight {1, 2, 3, 4} generated by odd Hs
    int se[4]; // # of exposed sites of weight {1, 2, 3, 4} generated by even Hs
        
    int Wo; // # of wasted contacts, i.e. sum of weights "taken" by P beads from odd exposed sites
    int We;
    
    int NSP_in_hcore;
    
    int first_h_index; // index of the first H beads in the protein
    
    void setWeight(int x, int y, int w);
    void increment_weight(int x, int y, bool odd);
    void decrement_weight(int x, int y, bool odd);
    void zero_weight(int x, int y, bool odd);
    
    Rect hcore; // area containing all H's
    vector<Rect> hcoreHistory;
    
    bool isPSiglet(int ind); // tells if the amino at index "ind" is a P-Singlet
    
    vector<Point> NSPInHcore; // # of non-singlets P beads in the current H-core
    vector<Point> NSPOutHcore;
    
public:
    
    
    Grid(int size, string prot);
   
    
    int getWeight(int x, int y);
    
    bool setCell(int x, int y, int amino_ind);
    
    
    int getSo(int w);
    int getSe(int w);
    
    int getWe();
    int getWo();
    
    Rect getHCore();
    int getNSPInHcore();
    
    
    
    
    // DEBUG
    void showAminos();
    void showWeights();
    
};

#endif /* Grid_hpp */
